// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	workOnMock "mockProject/workOnMock"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: user
func (_m *UserRepository) Add(user workOnMock.User) (workOnMock.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 workOnMock.User
	var r1 error
	if rf, ok := ret.Get(0).(func(workOnMock.User) (workOnMock.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(workOnMock.User) workOnMock.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(workOnMock.User)
	}

	if rf, ok := ret.Get(1).(func(workOnMock.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *UserRepository) Get(id uint64) (workOnMock.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 workOnMock.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (workOnMock.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) workOnMock.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(workOnMock.User)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
